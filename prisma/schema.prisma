generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                @id @default(cuid())
  email              String                @unique
  password           String
  name               String?
  /// @enum {STUDENT|MANAGER|ADMIN|INSTRUCTOR|NON_EDITING_INSTRUCTOR}
  /// - STUDENT: Default role for new users
  /// - MANAGER: Can manage courses and users
  /// - ADMIN: Full system access
  /// - INSTRUCTOR: Can create and edit courses
  /// - NON_EDITING_INSTRUCTOR: Can view courses but not edit them
  role               Role                  @default(STUDENT)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  resetToken         String?               @unique
  resetTokenExp      DateTime?
  bio                String?               @db.VarChar(200)
  hasOnboarded       Boolean               @default(false)
  preferredLanguage  String?
  profilePic         String?
  username           String?               @unique
  bannerImage        String?
  githubAccessToken  String?
  githubUsername     String?
  learningPath       String?
  skillLevel         String?
  interests          String[]              @default([])
  assessments        Assessment[]
  attempts           Attempt[]
  dailyActivities    DailyActivity[]
  enrolledBy         Enrollment[]          @relation("EnrolledByUser")
  enrolledIn         Enrollment[]          @relation("UserEnrollments")
  platformData       PlatformData[]
  submissions        ProblemSubmission[]
  userCodeDrafts     UserCodeDraft[]
  UserPlatformHandle UserPlatformHandle[]
  problemSettings    UserProblemSettings[]
  streak             UserStreak?
  xp                 UserXP?
  xpEvents           UserXPEvent[]
  problemTimeSpent   ProblemTimeSpent[]

  @@index([role])
  @@index([role, createdAt])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?    @default("")
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  visibility  Visibility @default(SHOW)
  courses     Course[]
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  categoryId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  subtitle    String
  endDate     DateTime
  startDate   DateTime
  visibility  String       @default("SHOW")
  level       CourseLevel  @default(Beginner)
  category    Category     @relation(fields: [categoryId], references: [id])
  enrollments Enrollment[]
  modules     Module[]

  @@index([categoryId])
  @@index([categoryId, level])
  @@index([categoryId, startDate])
}

model Module {
  id                 String       @id @default(cuid())
  title              String
  courseId           String
  order              Int
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  description        String?
  learningObjectives String[]     @default([])
  articles           Article[]
  course             Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submodules         Submodule[]
  videos             Video[]
  assessments        Assessment[] @relation("ModuleAssessments")

  @@index([courseId])
  @@index([courseId, order])
}

model Video {
  id           String      @id @default(cuid())
  title        String
  vimeoUrl     String
  order        Int         @default(0)
  moduleId     String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  description  String?
  duration     Int?
  status       VideoStatus @default(DRAFT)
  thumbnailUrl String?
  module       Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@index([moduleId, order])
}

model Submodule {
  id        String   @id @default(cuid())
  title     String
  moduleId  String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@index([moduleId, order])
}

model Folder {
  id          String       @id @default(cuid())
  name        String
  parentId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assessments Assessment[]
  parent      Folder?      @relation("FolderHierarchy", fields: [parentId], references: [id])
  subfolders  Folder[]     @relation("FolderHierarchy")
  questions   Question[]

  @@index([parentId])
}

model Question {
  id                  String                @id @default(cuid())
  name                String
  type                QuestionType
  status              QuestionStatus        @default(DRAFT)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  folderId            String
  version             Int                   @default(1)
  creatorId           String                @default("system")
  creatorName         String                @default("System")
  lastModifiedBy      String                @default("system")
  lastModifiedByName  String                @default("System")
  codingQuestion      CodingQuestion?
  mCQQuestion         MCQQuestion?
  folder              Folder                @relation(fields: [folderId], references: [id])
  versions            QuestionVersion[]
  sections            SectionQuestion[]
  userProblemSettings UserProblemSettings[]
  problemTimeSpent    ProblemTimeSpent[]

  @@index([folderId])
  @@index([creatorId])
  @@index([folderId, status])
  @@index([folderId, type])
  @@index([type, status])
}

model QuestionVersion {
  id         String         @id @default(cuid())
  questionId String
  version    Int
  name       String
  type       QuestionType
  status     QuestionStatus
  content    Json
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, version])
  @@index([questionId])
}

model MCQQuestion {
  id              String             @id @default(cuid())
  questionId      String             @unique
  questionText    String
  defaultMark     Float              @default(1.0)
  shuffleChoice   Boolean            @default(false)
  isMultiple      Boolean            @default(false)
  tags            String[]           @default([])
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  generalFeedback String?
  difficulty      QuestionDifficulty @default(MEDIUM)
  options         MCQOption[]
  question        Question           @relation(fields: [questionId], references: [id])

  @@index([questionId])
}

model MCQOption {
  id            String      @id @default(cuid())
  text          String
  grade         Float       @default(0.0)
  feedback      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  mcqQuestionId String
  mcqQuestion   MCQQuestion @relation(fields: [mcqQuestionId], references: [id], onDelete: Cascade)

  @@index([mcqQuestionId])
}

model CodingQuestion {
  id              String             @id @default(cuid())
  questionId      String             @unique
  questionText    String
  defaultMark     Float              @default(1.0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  difficulty      QuestionDifficulty @default(MEDIUM)
  isAllOrNothing  Boolean            @default(false)
  defaultLanguage String?
  question        Question           @relation(fields: [questionId], references: [id])
  languageOptions LanguageOption[]
  testCases       TestCase[]
  tags            Tag[]              @relation("CodingQuestionTags")

  @@index([difficulty])
  @@index([questionId])
}

model LanguageOption {
  id               String          @id @default(cuid())
  preloadCode      String?
  solution         String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  codingQuestionId String?
  language         String
  codingQuestion   CodingQuestion? @relation(fields: [codingQuestionId], references: [id], onDelete: Cascade)

  @@index([codingQuestionId])
  @@index([language])
}

model TestCase {
  id               String         @id @default(cuid())
  input            String
  output           String
  isSample         Boolean        @default(false)
  isHidden         Boolean        @default(false)
  showOnFailure    Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  codingQuestionId String
  gradePercentage  Float          @default(0.0)
  codingQuestion   CodingQuestion @relation(fields: [codingQuestionId], references: [id], onDelete: Cascade)

  @@index([codingQuestionId])
}

model Attempt {
  id           String     @id @default(uuid())
  userId       String
  assessmentId String
  startedAt    DateTime   @default(now())
  endedAt      DateTime?
  status       String
  answers      Json?
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@index([assessmentId])
  @@index([assessmentId, status])
  @@index([endedAt])
  @@index([startedAt])
  @@index([status])
  @@index([userId, assessmentId])
  @@index([userId])
  @@index([userId, startedAt])
  @@index([userId, status])
}

model Assessment {
  id                            String           @id @default(cuid())
  name                          String
  description                   String?
  status                        AssessmentStatus @default(DRAFT)
  startDate                     DateTime?
  endDate                       DateTime?
  duration                      Int?
  totalMarks                    Int              @default(100)
  passingMarks                  Int
  proctoring                    String           @default("not_proctoring")
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime         @updatedAt
  createdById                   String
  folderId                      String
  attemptsAllowed               Int?
  disableCopyPaste              Boolean          @default(false)
  disableRightClick             Boolean          @default(false)
  displayDescription            Boolean          @default(false)
  gradeToPass                   Float?
  navigationMethod              String           @default("free")
  questionBehaviourMode         String           @default("deferredfeedback")
  reviewAfterClose              Boolean          @default(false)
  reviewDuringAttempt           Boolean          @default(false)
  reviewImmediatelyAfterAttempt Boolean          @default(false)
  reviewLaterWhileOpen          Boolean          @default(false)
  shuffleWithinQuestions        Boolean          @default(false)
  timeBoundEnabled              Boolean          @default(false)
  timeLimitEnabled              Boolean          @default(false)
  unlimitedAttempts             Boolean          @default(false)
  proctored                     Boolean          @default(false)
  createdBy                     User             @relation(fields: [createdById], references: [id])
  folder                        Folder           @relation(fields: [folderId], references: [id])
  tags                          AssessmentTag[]
  attempts                      Attempt[]
  sections                      Section[]
  modules                       Module[]         @relation("ModuleAssessments")

  @@index([createdById])
  @@index([folderId])
  @@index([folderId, status])
  @@index([status, endDate])
  @@index([status])
  @@index([status, startDate])
}

model Section {
  id               String            @id @default(cuid())
  title            String
  description      String?
  order            Int               @default(0)
  assessmentId     String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  shuffleQuestions Boolean           @default(false)
  timeLimitEnabled Boolean           @default(false)
  timeLimit        Int?
  assessment       Assessment        @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  questions        SectionQuestion[]

  @@index([assessmentId])
  @@index([assessmentId, order])
}

model Tag {
  id              String           @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  assessments     AssessmentTag[]
  codingQuestions CodingQuestion[] @relation("CodingQuestionTags")

  @@index([name])
}

model AssessmentTag {
  assessmentId String
  tagId        String
  createdAt    DateTime   @default(now())
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  tag          Tag        @relation(fields: [tagId], references: [id])

  @@id([assessmentId, tagId])
  @@index([assessmentId])
  @@index([assessmentId, tagId])
  @@index([tagId])
}

model SectionQuestion {
  id          String   @id @default(cuid())
  sectionId   String
  questionId  String
  sectionMark Float?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  section     Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, questionId])
  @@index([questionId])
  @@index([sectionId])
  @@index([sectionId, order])
}

model Article {
  id          String        @id @default(cuid())
  title       String
  content     String
  order       Int           @default(0)
  moduleId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  readingTime Int?
  status      ArticleStatus @default(DRAFT)
  summary     String?
  tags        String[]      @default([])
  module      Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@index([moduleId, order])
}

model Enrollment {
  id             String   @id @default(cuid())
  userId         String
  courseId       String
  enrolledAt     DateTime @default(now())
  enrolledBy     String?
  status         String   @default("active")
  course         Course   @relation(fields: [courseId], references: [id])
  enrolledByUser User?    @relation("EnrolledByUser", fields: [enrolledBy], references: [id])
  user           User     @relation("UserEnrollments", fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
  @@index([enrolledBy])
  @@index([courseId, status])
  @@index([enrolledAt])
  @@index([userId, status])
}

model UserCodeDraft {
  id        String   @id @default(cuid())
  userId    String
  problemId String
  language  String
  code      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, problemId, language])
  @@index([language])
  @@index([problemId])
  @@index([userId])
  @@index([userId, updatedAt])
}

model UserProblemSettings {
  id                       String             @id @default(cuid())
  userId                   String
  problemId                String
  lastLanguage             String
  lastAcceptedSubmissionId String?
  hideAcceptedTab          Boolean?           @default(false)
  lastAcceptedSubmission   ProblemSubmission? @relation(fields: [lastAcceptedSubmissionId], references: [id])
  problem                  Question           @relation(fields: [problemId], references: [id])
  user                     User               @relation(fields: [userId], references: [id])

  @@unique([userId, problemId])
  @@index([lastAcceptedSubmissionId])
  @@index([problemId])
  @@index([userId])
}

model ProblemSubmission {
  id                String                @id @default(cuid())
  userId            String
  problemId         String
  language          String
  code              String
  submittedAt       DateTime              @default(now())
  testcasesPassed   Int
  totalTestcases    Int
  allPassed         Boolean               @default(false)
  runtime           String?
  memory            String?
  runtimePercentile String?
  memoryPercentile  String?
  status            String?               @default("PENDING")
  user              User                  @relation(fields: [userId], references: [id])
  userSettings      UserProblemSettings[]

  @@index([userId])
  @@index([problemId])
  @@index([allPassed])
  @@index([problemId, allPassed])
  @@index([submittedAt])
  @@index([userId, allPassed])
  @@index([userId, problemId])
  @@index([userId, submittedAt])
  @@index([status])
}

model UserXP {
  id        String        @id @default(cuid())
  userId    String        @unique
  xp        Int           @default(0)
  level     Int           @default(1)
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  xpEvents  UserXPEvent[]

  @@index([userId])
  @@index([xp])
}

model UserXPEvent {
  id          String   @id @default(cuid())
  userId      String
  eventType   String
  awardedXP   Int
  description String?
  createdAt   DateTime @default(now())
  relatedId   String?
  questionId  String?
  userXp      UserXP   @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "UserXPEvent_userxp_fkey")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserXPEvent_user_fkey")

  @@index([userId])
  @@index([questionId])
  @@index([eventType])
  @@index([createdAt])
  @@index([userId, questionId, eventType])
}

model UserStreak {
  id               String    @id @default(cuid())
  userId           String    @unique
  currentStreak    Int       @default(0)
  longestStreak    Int       @default(0)
  lastActivityDate DateTime?
  freezeCount      Int       @default(0)
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyActivity {
  id              String   @id @default(cuid())
  userId          String
  activityDate    DateTime
  xpEarned        Int      @default(0)
  submissionCount Int      @default(0)
  practiceCount   Int      @default(0)
  eventCount      Int      @default(0)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, activityDate])
}

model UserPlatformHandle {
  id        String   @id
  userId    String
  platform  String
  handle    String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@index([platform])
  @@index([userId])
}

model PlatformData {
  id        String   @id @default(cuid())
  userId    String
  platform  String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, platform])
  @@index([userId])
  @@index([platform])
}

model ProblemTimeSpent {
  id          String   @id @default(cuid())
  userId      String
  problemId   String
  timeSpentMs Int      @default(0)
  lastActive  DateTime @default(now())
  sessionCount Int     @default(0)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem     Question @relation(fields: [problemId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, problemId])
  @@index([userId])
  @@index([problemId])
}

model ProblemAverageTime {
  id            String   @id @default(cuid())
  problemId     String   @unique
  averageTimeMs Float
  lastUpdated   DateTime @default(now())
  sampleSize    Int      @default(0)

  @@index([problemId])
  @@index([lastUpdated])
}

/// Valid roles for users:
/// - STUDENT: Default role for new users
/// - MANAGER: Can manage courses and users
/// - ADMIN: Full system access
/// - INSTRUCTOR: Can create and edit courses
/// - NON_EDITING_INSTRUCTOR: Can view courses but not edit them
enum Role {
  STUDENT
  MANAGER
  ADMIN
  INSTRUCTOR
  NON_EDITING_INSTRUCTOR
}

enum Visibility {
  SHOW
  HIDE
}

enum QuestionType {
  MCQ
  CODING
}

enum QuestionStatus {
  DRAFT
  READY
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgrammingLanguage {
  C
  CPP
  JAVA
  PYTHON2
  PYTHON3
  GO
  JAVASCRIPT
  RUBY
  CSHARP
  PHP
  SWIFT
  RUST
}

enum AssessmentStatus {
  DRAFT
  READY
  PUBLISHED
  ARCHIVED
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum VideoStatus {
  DRAFT
  PUBLISHED
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}
